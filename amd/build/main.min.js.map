{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * @module      block_tasklist/main\n * @copyright   2022 University of Canterbury\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport Pending from 'core/pending';\nimport Ajax from 'core/ajax';\n\nconst ACTIVE_LISTS = [];\nlet CURRENT_ITEM = null;\n\n/**\n * Initialise new list\n *\n * @param {Integer} blockid\n */\nexport const init = (blockid) => {\n    // Load list\n    let block = document.querySelector(blockid);\n    let instanceid = block.dataset.instanceid;\n    ACTIVE_LISTS[blockid] = instanceid;\n    fetchList(instanceid);\n\n    let addButton = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] .block-tasklist-input-button');\n    addButton.addEventListener('click', addItem);\n\n    let taskInput = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] #block-tasklist-input-' + instanceid);\n    taskInput.addEventListener('keydown', (e) => {\n        if (e.code === 'Enter') {\n            addItem(e);\n        }\n    });\n\n    let list = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] ul.block-tasklist-list');\n    list.addEventListener('dragover', (event) => {\n        event.preventDefault();\n    });\n};\n\n/**\n * Add item to list via webservice\n *\n * @param {Event} clickEvent\n */\nconst addItem = (clickEvent) => {\n    let instanceid = clickEvent.target.closest('.block-tasklist').dataset.instanceid;\n    let name = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] input.block-tasklist-input');\n    let list = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] ul.block-tasklist-list');\n\n    if (name.value === '') {\n        return;\n    }\n\n    Ajax.call([{\n        methodname: 'block_tasklist_add_item',\n        args: {\n            instanceid: instanceid,\n            name: name.value,\n            complete: false,\n            position: list.childElementCount,\n        },\n    }])[0]\n        .then(renderItem)\n        .fail(Notification.exception);\n\n    name.value = '';\n};\n\n/**\n * Load list from webservice\n *\n * @param {Integer} instanceid\n * @returns {Promise<*>}\n */\nconst fetchList = async (instanceid) => {\n    return Ajax.call([{\n        methodname: 'block_tasklist_get_items',\n        args: {\n            instanceid: instanceid,\n        },\n    }])[0]\n        .then(items => {\n            if (!items.length) {\n                // Display no items text as list is empty.\n                document.getElementById('block-tasklist-no-items-' + instanceid).style.display = 'block';\n            }\n            return items;\n        })\n        .then(addItems)\n        .fail(Notification.exception);\n};\n\n/**\n * Iterate fresh items and render.\n *\n * @param {Array} items\n * @returns {Promise|*}\n */\nconst addItems = items => {\n    if (!items.length) {\n        return Promise.resolve();\n    }\n\n    const pendingPromise = new Pending('blocks/tasklist:addItems');\n    items.forEach(item => renderItem(item));\n\n    return pendingPromise.resolve();\n};\n\n/**\n * Render item in list\n *\n * @param {Object} itemData\n */\nconst renderItem = (itemData) => {\n    Templates.render('block_tasklist/task_item', itemData).done(function(html) {\n        let list = document.querySelector('div[data-instanceid=\"' + itemData.instanceid + '\"] ul.block-tasklist-list');\n        list.insertAdjacentHTML('beforeend', html);\n\n        // Check that the no items text may be displayed within this render function so there isn't a noticeable\n        // gap between hiding the no items text and an item appearing.\n        if (list.childElementCount === 1) {\n            // Hide no items text as will be adding an item.\n            document.getElementById('block-tasklist-no-items-' + itemData.instanceid).style.display = 'none';\n        }\n\n        let item = document.querySelector('li[data-itemid=\"' + itemData.id + '\"]');\n        addCompleteItemEvents(item);\n        addItemDragDrop(item);\n        addItemEditEvent(item);\n        addDeleteEvent(item);\n    }).fail(Notification.exception);\n};\n\n/**\n * Add event listeners to provide ability to edit task name\n *\n * @param {HTMLElement} item\n */\nconst addItemEditEvent = (item) => {\n    let itemname = item.querySelector('label.block-tasklist-itemname');\n    let input = item.querySelector('input.block-tasklist-item-edit-input');\n    item.querySelector('button.block-tasklist-item-edit').addEventListener('click', () => {\n        // Check if user is attempting to save the edit by using the edit icon.\n        if (itemname.style.display === 'none') {\n            updateItemName(item, itemname, input);\n        } else {\n            // Show item name input.\n            itemname.style.display = 'none';\n            input.style.display = 'inline-block';\n            item.draggable = false; // Remove draggable so cursor is usable in input.\n            input.focus();\n            // Place cursor at end of text.\n            let value = input.value;\n            input.value = '';\n            input.value = value;\n        }\n    });\n    item.querySelector('input.block-tasklist-item-edit-input').addEventListener('keydown', (e) => {\n        if (e.code === 'Enter') {\n            updateItemName(item, itemname, input);\n        }\n    });\n};\n\n/**\n * Finishes the interaction with the item name input\n *\n * @param {HTMLElement} item\n * @param {HTMLLabelElement} itemname\n * @param {HTMLInputElement} input\n */\nconst updateItemName = (item, itemname, input) => {\n    item.draggable = true;\n    itemname.innerText = input.value;\n    itemname.style.display = 'inline-block';\n    input.style.display = 'none';\n    let itemData = {\n        id: parseInt(item.dataset.itemid),\n        name: item.querySelector('label.block-tasklist-itemname').innerText,\n        position: parseInt(item.dataset.position),\n        complete: item.classList.contains('block-tasklist-item-complete')\n    };\n    updateItems(parseInt(item.dataset.instanceid), [itemData]);\n};\n\n/**\n * Add complete item events\n *\n * @param {HTMLElement} item\n */\nconst addCompleteItemEvents = (item) => {\n    item.querySelector('button.block-tasklist-item-complete').addEventListener('click', () => {\n        let itemData = {\n            id: parseInt(item.dataset.itemid),\n            name: item.querySelector('label.block-tasklist-itemname').innerText,\n            position: parseInt(item.dataset.position),\n        };\n        if (item.classList.contains('block-tasklist-item-complete')) {\n            item.classList.remove('block-tasklist-item-complete');\n            itemData.complete = false;\n        } else {\n            item.classList.add('block-tasklist-item-complete');\n            itemData.complete = true;\n        }\n        updateItems(parseInt(item.dataset.instanceid), [itemData]);\n    });\n};\n\n/**\n * Add delete button events\n *\n * @param {HTMLElement} item\n */\nconst addDeleteEvent = (item) => {\n    item.querySelector('.block-tasklist-item-delete').addEventListener('click', () => {\n        item.remove();\n        deleteItem(item.dataset.instanceid, item.dataset.itemid);\n        recalculatePositions(item.dataset.instanceid);\n        let list = document.querySelector('div[data-instanceid=\"' + item.dataset.instanceid + '\"] ul.block-tasklist-list');\n        if (list.childElementCount === 0) {\n            // Show no items text as list is empty.\n            document.getElementById('block-tasklist-no-items-' + item.dataset.instanceid).style.display = 'block';\n        }\n    });\n};\n\n/**\n * Add relevant event listeners to provide drag/drop functionality to rearrange list.\n *\n * @param {HTMLElement} item\n */\nconst addItemDragDrop = (item) => {\n    item.addEventListener('dragstart', () => {\n        CURRENT_ITEM = item;\n    });\n    item.addEventListener('drop', (event) => {\n        event.preventDefault();\n        if (item !== CURRENT_ITEM) {\n            let currentPos = 0, droppedPos = 0;\n            let children = item.parentElement.children;\n            for (let i = 0; i < children.length; i++) {\n                if (CURRENT_ITEM === children[i]) {\n                    currentPos = i;\n                }\n                if (item === children[i]) {\n                    droppedPos = i;\n                }\n            }\n            if (currentPos < droppedPos) {\n                item.parentNode.insertBefore(CURRENT_ITEM, item.nextSibling);\n                recalculatePositions(parseInt(item.dataset.instanceid));\n            } else {\n                item.parentNode.insertBefore(CURRENT_ITEM, item);\n                recalculatePositions(parseInt(item.dataset.instanceid));\n            }\n        }\n    });\n};\n\n/**\n * Recalculate all item positions and update using webservice.\n *\n * @param {Integer} instanceid\n */\nconst recalculatePositions = (instanceid) => {\n    let list = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] ul.block-tasklist-list');\n    let children = list.children;\n    let toUpdate = [];\n\n    for (let i = 0; i < children.length; i++) {\n        let item = children[i];\n        if (item.dataset.position != i) {\n            item.dataset.position = i;\n            let itemData = {\n                id: parseInt(item.dataset.itemid),\n                name: item.querySelector('label.block-tasklist-itemname').innerText,\n                position: parseInt(item.dataset.position),\n                complete: item.classList.contains('block-tasklist-item-complete')\n            };\n            toUpdate.push(itemData);\n        }\n    }\n\n    updateItems(instanceid, toUpdate);\n};\n\n/**\n * Bulk update item details\n *\n * @param {Integer} instanceid\n * @param {Array} items\n */\nconst updateItems = (instanceid, items) => {\n    Ajax.call([{\n        methodname: 'block_tasklist_update_items',\n        args: {\n            instanceid: instanceid,\n            items: items\n        },\n    }])[0].fail(Notification.exception);\n};\n\n/**\n * Call delete item webservice.\n *\n * @param {Integer} instanceid\n * @param {Integer} itemid\n */\nconst deleteItem = (instanceid, itemid) => {\n    Ajax.call([{\n        methodname: 'block_tasklist_delete_item',\n        args: {\n            instanceid: instanceid,\n            itemid: itemid\n        },\n    }])[0].fail(Notification.exception);\n};\n"],"names":["ACTIVE_LISTS","CURRENT_ITEM","blockid","instanceid","document","querySelector","dataset","fetchList","addEventListener","addItem","e","code","event","preventDefault","clickEvent","target","closest","name","list","value","call","methodname","args","complete","position","childElementCount","then","renderItem","fail","Notification","exception","async","Ajax","items","length","getElementById","style","display","addItems","Promise","resolve","pendingPromise","Pending","forEach","item","itemData","render","done","html","insertAdjacentHTML","id","addCompleteItemEvents","addItemDragDrop","addItemEditEvent","addDeleteEvent","itemname","input","updateItemName","draggable","focus","innerText","parseInt","itemid","classList","contains","updateItems","remove","add","deleteItem","recalculatePositions","currentPos","droppedPos","children","parentElement","i","parentNode","insertBefore","nextSibling","toUpdate","push"],"mappings":"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"}