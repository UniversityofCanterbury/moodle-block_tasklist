{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * @module      block_tasklist/main\n * @copyright   2022 University of Canterbury\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport Pending from 'core/pending';\nimport Ajax from 'core/ajax';\n\nconst ACTIVE_LISTS = [];\nlet CURRENT_ITEM = null;\n\n/**\n * Initialise new list\n *\n * @param {Integer} blockid\n */\nexport const init = (blockid) => {\n    // Load list\n    let block = document.querySelector(blockid);\n    let instanceid = block.dataset.instanceid;\n    ACTIVE_LISTS[blockid] = instanceid;\n    fetchList(instanceid);\n\n    let addButton = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] .block-tasklist-input-button');\n    addButton.addEventListener('click', addItem);\n\n    let taskInput = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] #block-tasklist-input-' + instanceid);\n    taskInput.addEventListener('keydown', (e) => {\n        if (e.code === 'Enter') {\n            addItem(e);\n        }\n    });\n\n    let list = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] ul.block-tasklist-list');\n    list.addEventListener('dragover', (event) => {\n        event.preventDefault();\n    });\n};\n\n/**\n * Add item to list via webservice\n *\n * @param {Event} clickEvent\n */\nconst addItem = (clickEvent) => {\n    let instanceid = clickEvent.target.closest('.block-tasklist').dataset.instanceid;\n    let name = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] input.block-tasklist-input');\n    let list = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] ul.block-tasklist-list');\n\n    if (name.value === '') {\n        return;\n    }\n\n    Ajax.call([{\n        methodname: 'block_tasklist_add_item',\n        args: {\n            instanceid: instanceid,\n            name: name.value,\n            complete: false,\n            position: list.childElementCount,\n        },\n    }])[0]\n        .then(renderItem)\n        .fail(Notification.exception);\n\n    name.value = '';\n};\n\n/**\n * Load list from webservice\n *\n * @param {Integer} instanceid\n * @returns {Promise<*>}\n */\nconst fetchList = async (instanceid) => {\n    return Ajax.call([{\n        methodname: 'block_tasklist_get_items',\n        args: {\n            instanceid: instanceid,\n        },\n    }])[0]\n        .then(addItems)\n        .fail(Notification.exception);\n};\n\n/**\n * Iterate fresh items and render.\n *\n * @param {Array} items\n * @returns {Promise|*}\n */\nconst addItems = items => {\n    if (!items.length) {\n        return Promise.resolve();\n    }\n\n    const pendingPromise = new Pending('blocks/tasklist:addItems');\n    items.forEach(item => renderItem(item));\n\n    return pendingPromise.resolve();\n};\n\n/**\n * Render item in list\n *\n * @param {Object} itemData\n */\nconst renderItem = (itemData) => {\n    Templates.render('block_tasklist/task_item', itemData).done(function(html) {\n        let list = document.querySelector('div[data-instanceid=\"' + itemData.instanceid + '\"] ul.block-tasklist-list');\n        list.insertAdjacentHTML('beforeend', html);\n\n        let item = document.querySelector('li[data-itemid=\"' + itemData.id + '\"]');\n        addCompleteItemEvents(item);\n        addItemDragDrop(item);\n        addItemEditEvent(item);\n        addDeleteEvent(item);\n    }).fail(Notification.exception);\n};\n\n/**\n * Add event listeners to provide ability to edit task name\n *\n * @param {HTMLElement} item\n */\nconst addItemEditEvent = (item) => {\n    let itemname = item.querySelector('label.block-tasklist-itemname');\n    let input = item.querySelector('input.block-tasklist-item-edit-input');\n    item.querySelector('button.block-tasklist-item-edit').addEventListener('click', () => {\n        // Check if user is attempting to save the edit by using the edit icon.\n        if (itemname.style.display === 'none') {\n            updateItemName(item, itemname, input);\n        } else {\n            // Show item name input.\n            itemname.style.display = 'none';\n            input.style.display = 'inline-block';\n            item.draggable = false; // Remove draggable so cursor is usable in input.\n            input.focus();\n            // Place cursor at end of text.\n            let value = input.value;\n            input.value = '';\n            input.value = value;\n        }\n    });\n    item.querySelector('input.block-tasklist-item-edit-input').addEventListener('keydown', (e) => {\n        if (e.code === 'Enter') {\n            updateItemName(item, itemname, input);\n        }\n    });\n};\n\n/**\n * Finishes the interaction with the item name input\n *\n * @param {HTMLElement} item\n * @param {HTMLLabelElement} itemname\n * @param {HTMLInputElement} input\n */\nconst updateItemName = (item, itemname, input) => {\n    item.draggable = true;\n    itemname.innerText = input.value;\n    itemname.style.display = 'inline-block';\n    input.style.display = 'none';\n    let itemData = {\n        id: parseInt(item.dataset.itemid),\n        name: item.querySelector('label.block-tasklist-itemname').innerText,\n        position: parseInt(item.dataset.position),\n        complete: item.classList.contains('block-tasklist-item-complete')\n    };\n    updateItems(parseInt(item.dataset.instanceid), [itemData]);\n};\n\n/**\n * Add complete item events\n *\n * @param {HTMLElement} item\n */\nconst addCompleteItemEvents = (item) => {\n    item.querySelector('button.block-tasklist-item-complete').addEventListener('click', () => {\n        let itemData = {\n            id: parseInt(item.dataset.itemid),\n            name: item.querySelector('label.block-tasklist-itemname').innerText,\n            position: parseInt(item.dataset.position),\n        };\n        if (item.classList.contains('block-tasklist-item-complete')) {\n            item.classList.remove('block-tasklist-item-complete');\n            itemData.complete = false;\n        } else {\n            item.classList.add('block-tasklist-item-complete');\n            itemData.complete = true;\n        }\n        updateItems(parseInt(item.dataset.instanceid), [itemData]);\n    });\n};\n\n/**\n * Add delete button events\n *\n * @param {HTMLElement} item\n */\nconst addDeleteEvent = (item) => {\n    item.querySelector('.block-tasklist-item-delete').addEventListener('click', () => {\n        item.remove();\n        deleteItem(item.dataset.instanceid, item.dataset.itemid);\n        recalculatePositions(item.dataset.instanceid);\n    });\n};\n\n/**\n * Add relevant event listeners to provide drag/drop functionality to rearrange list.\n *\n * @param {HTMLElement} item\n */\nconst addItemDragDrop = (item) => {\n    item.addEventListener('dragstart', () => {\n        CURRENT_ITEM = item;\n    });\n    item.addEventListener('drop', (event) => {\n        event.preventDefault();\n        if (item !== CURRENT_ITEM) {\n            let currentPos = 0, droppedPos = 0;\n            let children = item.parentElement.children;\n            for (let i = 0; i < children.length; i++) {\n                if (CURRENT_ITEM === children[i]) {\n                    currentPos = i;\n                }\n                if (item === children[i]) {\n                    droppedPos = i;\n                }\n            }\n            if (currentPos < droppedPos) {\n                item.parentNode.insertBefore(CURRENT_ITEM, item.nextSibling);\n                recalculatePositions(parseInt(item.dataset.instanceid));\n            } else {\n                item.parentNode.insertBefore(CURRENT_ITEM, item);\n                recalculatePositions(parseInt(item.dataset.instanceid));\n            }\n        }\n    });\n};\n\n/**\n * Recalculate all item positions and update using webservice.\n *\n * @param {Integer} instanceid\n */\nconst recalculatePositions = (instanceid) => {\n    let list = document.querySelector('div[data-instanceid=\"' + instanceid + '\"] ul.block-tasklist-list');\n    let children = list.children;\n    let toUpdate = [];\n\n    for (let i = 0; i < children.length; i++) {\n        let item = children[i];\n        if (item.dataset.position != i) {\n            item.dataset.position = i;\n            let itemData = {\n                id: parseInt(item.dataset.itemid),\n                name: item.querySelector('label.block-tasklist-itemname').innerText,\n                position: parseInt(item.dataset.position),\n                complete: item.classList.contains('block-tasklist-item-complete')\n            };\n            toUpdate.push(itemData);\n        }\n    }\n\n    updateItems(instanceid, toUpdate);\n};\n\n/**\n * Bulk update item details\n *\n * @param {Integer} instanceid\n * @param {Array} items\n */\nconst updateItems = (instanceid, items) => {\n    Ajax.call([{\n        methodname: 'block_tasklist_update_items',\n        args: {\n            instanceid: instanceid,\n            items: items\n        },\n    }])[0].fail(Notification.exception);\n};\n\n/**\n * Call delete item webservice.\n *\n * @param {Integer} instanceid\n * @param {Integer} itemid\n */\nconst deleteItem = (instanceid, itemid) => {\n    Ajax.call([{\n        methodname: 'block_tasklist_delete_item',\n        args: {\n            instanceid: instanceid,\n            itemid: itemid\n        },\n    }])[0].fail(Notification.exception);\n};\n"],"names":["ACTIVE_LISTS","CURRENT_ITEM","blockid","instanceid","document","querySelector","dataset","fetchList","addEventListener","addItem","e","code","event","preventDefault","clickEvent","target","closest","name","list","value","call","methodname","args","complete","position","childElementCount","then","renderItem","fail","Notification","exception","async","Ajax","addItems","items","length","Promise","resolve","pendingPromise","Pending","forEach","item","itemData","render","done","html","insertAdjacentHTML","id","addCompleteItemEvents","addItemDragDrop","addItemEditEvent","addDeleteEvent","itemname","input","style","display","updateItemName","draggable","focus","innerText","parseInt","itemid","classList","contains","updateItems","remove","add","deleteItem","recalculatePositions","currentPos","droppedPos","children","parentElement","i","parentNode","insertBefore","nextSibling","toUpdate","push"],"mappings":"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"}